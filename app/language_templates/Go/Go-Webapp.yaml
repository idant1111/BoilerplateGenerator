web_app:
  src:
    main.go: |
      package main

      import (
        "fmt"
        "net/http"
        "log"
      )

      func handler(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "Hello, World!")
      }

      func main() {
        http.HandleFunc("/", handler)
        fmt.Println("Server is running on port 8080")
        log.Fatal(http.ListenAndServe(":8080", nil))
      }
  config:
    docker-compose.yml: |
      version: '3.8'

      services:
        web:
          build: .
          ports:
            - "8080:8080"
          volumes:
            - .:/app
          environment:
            - GO_ENV=development
    Dockerfile: |
      FROM golang:1.18

      WORKDIR /app

      COPY go.mod .
      COPY go.sum .

      RUN go mod download

      COPY . .

      RUN go build -o main .

      EXPOSE 8080

      CMD ["./main"]
    k8s:
      deployment.yaml: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: go-web-app
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: go-web-app
          template:
            metadata:
              labels:
                app: go-web-app
            spec:
              containers:
              - name: go-web-app
                image: go-web-app:latest
                ports:
                - containerPort: 8080
      service.yaml: |
        apiVersion: v1
        kind: Service
        metadata:
          name: go-web-app-service
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 8080
          selector:
            app: go-web-app
  go.mod: |
    module webapp

    go 1.18
  go.sum: |
    # Go module dependencies (autogenerated)
  README.md: |
    # Go Web Application

    This is a comprehensive Go web application that includes Docker and Kubernetes deployment configurations.

    ## Setup and Running

    1. Run `go mod tidy` to install dependencies.
    2. Run `go run main.go` to start the application.
    3. Alternatively, you can use Docker:
       - Build and run the Docker container with `docker-compose up --build`.
    4. Kubernetes (K8s) deployment:
       - Use the files in the `config/k8s` directory to deploy the app to a Kubernetes cluster.
