python-data_science_app:
  data_science:
    src:
      data:
        __init__.py: ""
        loader.py: |
          import pandas as pd

          def load_csv(file_path):
              return pd.read_csv(file_path)
      models:
        __init__.py: ""
        linear_regression.py: |
          from sklearn.linear_model import LinearRegression

          def train_model(X, y):
              model = LinearRegression()
              model.fit(X, y)
              return model
      visualization:
        __init__.py: ""
        plots.py: |
          import matplotlib.pyplot as plt

          def plot_scatter(x, y):
              plt.scatter(x, y)
              plt.xlabel('X')
              plt.ylabel('Y')
              plt.title('Scatter Plot')
              plt.show()
    notebooks:
      exploratory_analysis.ipynb: |
        {
         "cells": [
          {
           "cell_type": "markdown",
           "metadata": {},
           "source": [
            "# Exploratory Data Analysis"
           ]
          },
          {
           "cell_type": "code",
           "execution_count": null,
           "metadata": {},
           "outputs": [],
           "source": [
            "import pandas as pd\n",
            "import matplotlib.pyplot as plt\n",
            "from src.data.loader import load_csv\n",
            "from src.visualization.plots import plot_scatter"
           ]
          },
          {
           "cell_type": "code",
           "execution_count": null,
           "metadata": {},
           "outputs": [],
           "source": [
            "# Load your data here\n",
            "# data = load_csv('path/to/your/data.csv')\n",
            "# Perform your analysis"
           ]
          }
         ],
         "metadata": {
          "kernelspec": {
           "display_name": "Python 3",
           "language": "python",
           "name": "python3"
          },
          "language_info": {
           "codemirror_mode": {
            "name": "ipython",
            "version": 3
           },
           "file_extension": ".py",
           "mimetype": "text/x-python",
           "name": "python",
           "nbconvert_exporter": "python",
           "pygments_lexer": "ipython3",
           "version": "3.8.5"
          }
         },
         "nbformat": 4,
         "nbformat_minor": 4
        }
    tests:
      __init__.py: ""
      test_data_loader.py: |
        import pandas as pd
        from src.data.loader import load_csv

        def test_load_csv(tmp_path):
            # Create a temporary CSV file
            df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
            csv_file = tmp_path / "test.csv"
            df.to_csv(csv_file, index=False)

            # Test the load_csv function
            loaded_df = load_csv(csv_file)
            assert loaded_df.equals(df)
    requirements.txt: |
      pandas==1.5.3
      matplotlib==3.7.1
      scikit-learn==1.2.2
      jupyter==1.0.0
      pytest==7.3.1
    README.md: |
      # Data Science Project

      This is a template for a data science project.

      ## Setup and Running

      1. Clone the repository
      2. Run Jupyter Notebook:
         - With Docker: `docker-compose up`
         - Or locally: 
           - Create a virtual environment: `python -m venv venv`
           - Activate the virtual environment:
             - On Windows: `venv\Scripts\activate`
             - On Unix or MacOS: `source venv/bin/activate`
           - Install the requirements: `pip install -r requirements.txt`
           - Run Jupyter Notebook: `jupyter notebook`

      ## Project Structure

      - `src/`: Source code
        - `data/`: Data loading and processing scripts
        - `models/`: Machine learning models
        - `visualization/`: Data visualization scripts
      - `notebooks/`: Jupyter notebooks for analysis
      - `tests/`: Unit tests

      ## Running Tests

      Run the tests using pytest: `pytest`

    Dockerfile: |
      FROM python:3.11-slim-buster

      WORKDIR /app

      COPY requirements.txt requirements.txt
      RUN pip install --no-cache-dir -r requirements.txt

      COPY . .

      CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--no-browser", "--allow-root"]

    docker-compose.yml: |
      version: '3.8'

      services:
        jupyter:
          build: .
          ports:
            - "8888:8888"
          environment:
            - JUPYTER_ENABLE_LAB=yes
          volumes:
            - .:/app
